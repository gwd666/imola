% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flex.R
\name{flexPanel}
\alias{flexPanel}
\title{Create a flexbox based panel}
\usage{
flexPanel(
  ...,
  template = NULL,
  direction = "row",
  wrap = "nowrap",
  justify_content = "flex-start",
  align_items = "stretch",
  align_content = "flex-start",
  gap = 0,
  flex = c(1),
  grow = NULL,
  shrink = NULL,
  basis = NULL,
  breakpoint_system = activeBreakpoints(),
  id = generateID()
)
}
\arguments{
\item{...}{Tag attributes (named arguments) and children (unnamed arguments).
A named argument with an \code{NA} value is rendered as a boolean attributes.
Named arguments can be used to provide additional values to the container
of the grid.

For a full list of valid HTML attributes check visit
\url{https://www.w3schools.com/tags/ref_attributes.asp}.

Children may include any combination of:
\itemize{
\item Other tags objects
\item \code{\link[=HTML]{HTML()}} strings
\item \code{\link[=htmlDependency]{htmlDependency()}}s
\item Single-element atomic vectors
}}

\item{template}{The name of the template to use as a base for the grid, or
the resulting value from using makeTemplate() to generate a template
object.

See \code{listTemplates()} and \code{registerTemplate()} for more information.}

\item{direction}{Direction of the flow of elements in the panel.

Accepts a valid css \code{flex-direction} value (\code{row} | \code{row-reverse} |
\code{column} | \code{column-reverse}).

By default the \code{row} value is used. Supports breakpoints.}

\item{wrap}{Should elements be allowed to wrap into multiple lines.

Accepts a valid css \code{flex-wrap} value (\code{nowrap} | \code{wrap} | \code{wrap-reverse}).

By default the value \code{wrap} is used. Supports breakpoints.}

\item{justify_content}{Defines the alignment along the main axis. Accepts a
valid css \code{justify-content} value (\code{flex-start} | \code{flex-end} | \code{center} |
\code{space-between} | \code{space-around} | \code{space-evenly} | \code{start} |
\code{end} | \code{left} | \code{right}).

By default the value \code{flex-start} is used. Supports breakpoints.}

\item{align_items}{Defines the default behavior for how flex items are laid
out along the cross axis on the current line.

Accepts a valid css \code{align-items} value (\code{stretch} | \code{flex-start} |
\code{flex-end} | \code{center} | \code{baseline} | \verb{first baseline} | \verb{last baseline} |
\code{start} | \code{end} | \code{self-start} | \code{self-end}).

By default the value \code{stretch} is used. Supports breakpoints.}

\item{align_content}{Aligns a flex containerâ€™s lines within when there is
extra space in the cross-axis.

Accepts a valid css \code{align-content} value
(flex-start | flex-end | center | space-between | space-around |
space-evenly | stretch | start | end | baseline | first baseline |
last baseline).

By default the value 'flex-start' is used. Supports breakpoints.}

\item{gap}{Defines the space between elements in the panel. Controls both the
space between rows and columns.

Accepts a css valid value, or 2 values separated by a space (if using
diferent values for row and column spacing).

By default the value \code{0} is used. Supports breakpoints.}

\item{flex}{A vector of valid css 'flex' values for the child elements.
Defines how elements in the panel can grow, shrink and their initial size.

Arguments that target child elements individually require a vector of
values instead of a single value, with each entry of the vector affecting
the nth child element.

If the given vector has less entries that the number
of child elements, the values will be repeated until the pattern affects
all elements in the panel. If the number of entries given is more that the
number of child elements, exceeding entries will be ignored. NA can also be
used as a entry to skip adding a rule to a specific nth element.

Accepts a valid css \code{flex} value.

By default c(1) is used, meaning all elements can grow and shrink as
required, at the same rate. Supports breakpoints.}

\item{grow}{A vector of valid css 'flex-grow' values. Defines the rate of
how elements can grow. Entries will overwrite the nth 'flex' value,
and can be used make more targeted rules.

Entries will overwrite the 'flex' values, and can
be used make more targeted rules.

Arguments that target child elements individually require a vector of
values instead of a single value, with each entry of the vector affecting
the nth child element.

If the given vector has less entries that the number
of child elements, the values will be repeated until the pattern affects
all elements in the panel. If the number of entries given is more that the
number of child elements, exceeding entries will be ignored. NA can also be
used as a entry to skip adding a rule to a specific nth element.

By default NULL is used, meaning values from the flex argument will be
used instead. Supports breakpoints.}

\item{shrink}{A vector of valid css 'flex-shrink' values. Defines the rate
of how elements can shrink. Entries will overwrite the nth 'flex' value,
and can be used make more targeted rules.

Arguments that target child elements individually require a vector of
values instead of a single value, with each entry of the vector affecting
the nth child element.

If the given vector has less entries that the number
of child elements, the values will be repeated until the pattern affects
all elements in the panel. If the number of entries given is more that the
number of child elements, exceeding entries will be ignored. NA can also be
used as a entry to skip adding a rule to a specific nth element.

By default NULL is used, meaning values from the flex argument will be
used instead. Supports breakpoints.}

\item{basis}{A vector of valid css 'flex-basis' values. Defines the base
size of elements. Entries will overwrite the nth 'flex' value,
and can be used make more targeted rules.

Arguments that target child elements individually require a vector of
values instead of a single value, with each entry of the vector affecting
the nth child element.

If the given vector has less entries that the number
of child elements, the values will be repeated until the pattern affects
all elements in the panel. If the number of entries given is more that the
number of child elements, exceeding entries will be ignored. NA can also be
used as a entry to skip adding a rule to a specific nth element.

By default NULL is used, meaning values from the flex argument will be
used instead. Supports breakpoints.}

\item{breakpoint_system}{Optional Media breakpoints to use. Will default to
the current active breakpoint system.}

\item{id}{The panel id. A randomly generated one is used by default.
You cannot have more than one element with the same id in an HTML document.}
}
\value{
An HTML tagList.
}
\description{
Create a flexbox based panel
}
\details{
Behaves similar to a normal HTML tag, but provides helping
arguments that simplify the way flexbox css can be created from shiny.
}
\note{
When creating responsive layouts based on media rules, for most css
arguments a named list can be passed instead of a single value.

The names in the list can be any of the registered breakpoints available in
\code{activeBreakpoints()}, of on the provided \code{breakpoint_system} argument.
Current global \code{activeBreakpoints()} can be changed using
\code{setBreakpointSystem()}.

In a similar fashion, the current \code{activeBreakpoints()} can also be
modified with the \code{registerBreakpoint()} and \code{unregisterBreakpoint()}.

It is recomended to define the breakpoint system for the application
globally before UI definitions, but the \code{breakpoint_system} in panel
functions allows for more flexibility when it comes to reuse components
from other projects.

See
\url{https://css-tricks.com/snippets/css/a-guide-to-flexbox/}
for additional details on using css flexbox
}
\examples{
if (interactive()) {
library(shiny)
library(imola)
flexPanel(
  div("example content"),
  div("example content"),
  div("example content")
)
}

}
\seealso{
\code{\link[=flexPage]{flexPage()}}
}
\concept{flexbox functions}
\keyword{flex}
\keyword{panel}
